#!/usr/bin/env bash

# Define dotfiles root directory by this script's location
dot_root="${0%/*}"

# Ask user for verification before making changes
areyousure () {
  local message="$1" yn
  printf '\e[1m%b\e[m\n' "$message" >&2
  while [[ -z "$yn" ]]; do
    read -p "Continue? [y/n]: " yn >&2
    case "$yn" in
      Y|y|[Yy][Ee][Ss]) return 0;;
      N|n|[Nn][Oo]) return 1;;
      *) unset yn;;
    esac
  done
}

areyousure "This script will create links to files in '$dot_root'." || exit

# Check that .dotconfig file exists
dotconfig="$dot_root/.dotconfig"
[[ -f "$dotconfig" ]] || {
	printf '%s\n' "Cannot find .dotconfig!" >&2
	exit 1
}

# Put dotfiles in an array
dotfiles=($(cat $dotconfig | while read file link; do
		printf '%s\n' "$dot_root/$file" 
	done
))

# Put links in an array
linkfiles=($(cat $dotconfig | while read file link; do
		printf '%s\n' "$link"
	done
))

# Link the files
file_link() {
	local file="$1" link="$2" file_color link_color='\e[1;36m'

	# Check that the original file exists
	if [[ -f "$file" ]]; then
		# Return if the file and link are the same
		cmp "$file" "$link" &>/dev/null && {
			if [ -x "$file" ]; then
				file_color='\e[1;32m'
			else
				file_color='\e[m'
			fi
			printf "$file_color%s\e[m == $link_color%s\e[m\n" "$file" "$link"
			return 0
		}
	else
		if [[ ! -d "$file" ]]; then
			# Return if the file does not exist
			printf "'\e[31m%s\e[m': No such file or directory!\n" "$file" >&2
			return 1
		fi
	fi

	# Check if the link exists and prompt to overwrite
	if [[ -d "$file" && -L "$link" ]]; then
		file_color='\e[1;36m'
		areyousure "Overwrite existing link '$link_color$link\e[m'?" || return 1
	fi

	# Check if the file exists as a directory and prompt to overwrite
	if [[ -d "$file" && -d "$link" ]]; then
		file_color='\e[1;34m'
		areyousure "Overwrite existing directory '$file_color$link\e[m'?" && {
			mv "$link" "$link~"
		} || return
	fi

	# Make the parent directory if it doesn't exist
	[[ -d "${link%/*}" ]] || mkdir -p "${link%/*}"


	# Link the file
	ln -si "$file" "$link" &&
		printf "$file_color%s\e[m -> $link_color%s\e[m\n" "$file" "$link"
}

# Loop through dots and links
for i in "${!dotfiles[@]}"; do
	file_link "${dotfiles[$i]}" "${linkfiles[$i]}"
done
